// Common machine definition
	//r12 Head position (starting at 0)
        //r11 Current state
        //r10 Symbol under head
	mov r9, #.CharScreen  //Constant

loadTape:
	mov r0, #inputMsg
	str r0, .WriteString
	mov r0, #tape
	str r0, .ReadString

initialiseMachine:
	mov r12, #0 //Initial head position
        ldrb r11, initialState
mainLoop:
	bl drawTapeAndState
    lsl r0,r11,#24  //Put current state as first 8-bits of selector 
 	ldrb r10, [r12+tape]     //read symbol into r0
	cmp r10, #0  //Null
	bne .+2  //Skip next line if not null
	mov r10, #0x20  //Replace null with space
	lsl r1, r1, #16  //put character under head as next 8 bits in selector
    orr r0, r1, r0  

//Specific machine starts here
rule0:  cmp r0,#0x3030 	//Does rule selector match current state
	bne rule1
	mov r11,#0x30  //New state
	mov r10,#0x31  //Symbol to be written
	mov r7,#1      //Movement
	b makeTransition

rule1:  cmp r0,#0x3031
	bne rule2
	mov r11,#0x30
	mov r10,#0x30
	mov r7,#1
	b makeTransition

rule2:  cmp r0,#0x3020
	bne rule3
	mov r11,#0x2A
	mov r10,#0x20
	mov r7,#1
	b makeTransition

rule3:  mov r0, #noMatchingRule
	str r0, .WriteString
	halt

makeTransition:
        ldrb r0, haltState
	cmp r11, r0  
        bne mainLoop
    bl drawTapeAndState
    halt
    
//r12 contains the position of the head relative to tape (start = 0)
//r11 contains the current state (drawn under head)
//r9 contains const #.CharScreen
drawTapeAndState:
	push {r0-r2}	
	mov r0, #0
	add r1, r12, #tapeHeader
	ldrb r2, [r1 + r0]
	strb r2, [r9 + r0]
	add r0,r0,#1
	cmp r0, #16
	blt .-4
	mov r0, #0x5E //'^' 
	strb r0, [r9+#24] //draw head
	strb r11, [r9 + #40]  //Draw state
	pop {r0-r2}
	ret

noMatchingRule: .asciz "Error! No matching rule"
startingTape: .asciz "0010  

selectorMask:  .word 0xffff0000
newStateMask:  .word 0x0000ff00
writeCharMask: .word 0x0000007f
movementMask:  .word 0x00000080

inputMsg: .asciz "\n\n\n\n\nEnter start tape"

initialState: .ascii "0"
haltState:    .ascii "*"

tapeHeader: 
	.ascii "        " //8 blanks - half screen width
tape: .block 64 //chars max (divisble by four

