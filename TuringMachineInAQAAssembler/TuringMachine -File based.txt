// Common machine definition
	//r12 Head position (starting at 0)
        //r11 Current state
        //r10 Symbol under head
	mov r9, #.CharScreen  //Constant

loadRules:
	ldr r0, .OpenFile
        mov r3, #compressedRules
nextRule:
	ldr r1, .FileLength
	cmp r1,#1
        blt loadTape 	//All rules compressed
	mov r2, #0  	//Compressed rule to be built-up here
	mov r0, #4
	bl skipToFileChar
	lsl r1, r1, #24  //Move to leftmost 8 bits
        orr r2,r2,r1 	//build into compressed instruction
	mov r0, #2
	bl skipToFileChar
	lsl r1, r1, #16 //Move to next 8 bits
	orr r2,r2,r1 	
	mov r0, #5
	bl skipToFileChar
	lsl r1, r1, #8  
	orr r2,r2,r1 	
	mov r0, #2
	bl skipToFileChar 
        orr r2,r2,r1 
	mov r0, #2
	bl skipToFileChar
	cmp r1, #0x46  	//'L' (bit 7 stays at 0)
	bne right 	
	b storeCompressedRule
right:	mov r1, #0x80  	// set bit 7 to 1
	orr r2,r2,r1
storeCompressedRule:
	str r2,[r3]
	add r3,r3,#4	
	mov r0, #3  //Skip to 1st char in next rule (allowing for cr/lf)
	bl skipToFileChar
	b nextRule

loadTape:
	mov r0, #inputMsg
	str r0, .WriteString
	mov r0, #tape
	str r0, .ReadString

initialiseMachine:
	mov r12, #0 //Initial head position
        ldrb r11, initialState
	bl drawTapeAndState
        halt
runLoop:
        lsl r3, r11, #24 //put current state as leftmost 4 bits of r9
	ldrb r0, [r12+tape] 
	cmp r0, #0  //Null
	bne .+2  //Skip next line if not null
	mov r0, #0x20  //Replace null with space
	lsl r0, r0, #16  //put character under head as next 8 bits in r9
        orr r3, r3, r0  
        mov r0, #0       //Initialise rule counter

findMatchingRule:
	ldr r4,[r0+compressedRules]
        ldr r2, selectorMask //Select only the 'selector' part of the rule
        and r1, r4, r2   
        cmp r3, r1   //Check for rule selector match
        beq extractActionsFromRule  //r4 now contains the rule
        add r0, r0, #4
        //TODO check for end of rules & throw exception
        b findMatchingRule

extractActionsFromRule:
        ldr r2, newStateMask
        and r11, r4, r2 //Extract new state from rule
        lsr r11,r11,#8
        ldr r2, writeCharMask 
        and r10, r4, r2  //Extract new character to be written from rule
        strb r10, [r12+tape]  //Write character to current head position
	ldr r1, movementMask
        and r0, r4, r1//Extract movement 
	cmp r0, #0x80  //This means 'right'; otherwise left
        beq .+3
        sub r12, r12, #1  //Move head left
        b .+2
	add r12, r12, #1  //Move head right
	bl drawTapeAndState
checkForHalt:
        ldrb r0, haltState
	cmp r11, r0  
        bne runLoop
        halt

//Skips to the character on a file read.
//Pass in number in r0 e.g. 4 will skip next 3 chars & read the 4th

//Character read is placed in r1

skipToFileChar:	
	push {r0}
	ldr r1, .ReadFileChar
	sub r0,r0,#1
	cmp r0, #0
	bgt skipToFileChar
	pop {r0}
	ret

//r12 contains the position of the head relative to tape (start = 0)
//r11 contains the current state (drawn under head)
//r9 contains const #.CharScreen
drawTapeAndState:
	push {r0-r2}	
	mov r0, #0
	add r1, r12, #tapeHeader
	ldrb r2, [r1 + r0]
	strb r2, [r9 + r0]
	add r0,r0,#1
	cmp r0, #16
	blt .-4
	mov r0, #0x5E //'^' 
	strb r0, [r9+#24] //draw head
	strb r11, [r9 + #40]  //Draw state
	pop {r0-r2}
	ret



selectorMask:  .word 0xffff0000
newStateMask:  .word 0x0000ff00
writeCharMask: .word 0x0000007f
movementMask:  .word 0x00000080

inputMsg: .asciz "\n\n\n\n\nEnter start tape"

initialState: .ascii "0"
haltState:    .ascii "*"

tapeHeader: 
	.ascii "        " //8 blanks - half screen width
tape: .block 64 //chars max (divisble by four

compressedRules:
	.word 0
	.block 12


//Format for each transition rule -  8 hex digits
//2 digits current state
//2 digits read symbol
//2 digits new state
//2 digits write symbol, but bit 7 is the movement (0 means Left; 1 means Right)

